buildscript {
    repositories {
        maven { url("https://maven.aliyun.com/repository/public") }
        maven { url("https://maven.aliyun.com/repository/spring") }
        maven { url("https://maven.aliyun.com/repository/mapr-public") }
        maven { url("https://maven.aliyun.com/repository/spring-plugin") }
        maven { url("https://maven.aliyun.com/repository/gradle-plugin") }
        maven { url("https://maven.aliyun.com/repository/google") }
        maven { url("https://maven.aliyun.com/repository/jcenter") }
    }
}

def mainVersion = "1.3.0"
Map<String, String> envMap = new HashMap<>(System.getenv())
def imageRepository = envMap.getOrDefault("IMAGE_REPOSITORY ", "wangz2019/centos-systemd")
String imageWithTagPrefix = "${imageRepository}:${mainVersion}"
def centosVersionList = ["centos7.9.2009", "centos8.3.2011"]
File runtimeDockerDirectory = project.file("${project.buildDir}/runtime/docker")
task buildDockerImage() {
    doFirst {
        runtimeDockerDirectory.parentFile.mkdirs()
        runtimeDockerDirectory.delete()
        copy {
            from project.file("docker")
            into runtimeDockerDirectory
        }
    }
    doLast {
        for (String centosVersion : centosVersionList) {
            println("building with centosVersion=${centosVersion}")
            exec {
                commandLine(
                        "docker", "build", "--rm",
                        "-f", project.file("${runtimeDockerDirectory.getAbsolutePath()}/Dockerfile"),
                        "-t", imageWithTag(imageWithTagPrefix, centosVersion),
                        "--build-arg", "CENOS_VERSION=${centosVersion}",
                        runtimeDockerDirectory,
                )
            }
        }
    }
}

task pushDockerImage() {
    doLast {
        for (String centosVersion : centosVersionList) {
            exec {
                commandLine(
                        "docker", "buildx", "build",
                        "--platform", "linux/amd64,linux/arm64",
                        "--rm",
                        "-f", project.file("${runtimeDockerDirectory.getAbsolutePath()}/Dockerfile"),
                        "-t", imageWithTag(imageWithTagPrefix, centosVersion),
                        "--push",
                        runtimeDockerDirectory,
                )
            }
        }
    }
    dependsOn(buildDockerImage)
}

def containerName = "centos-systemd"
def port = 1022
task runDockerContainer(type: Exec) {
    def keysDirectory = project.file("${project.buildDir}/runtime/keys")
    doFirst {
        keysDirectory.mkdirs()
        copy {
            from "${System.getenv("HOME")}/.ssh/id_rsa.pub"
            into keysDirectory
        }
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "run", "--rm",
            "-p", "${port}:22",
            "--name", containerName,
            "--privileged",
            "-v", "${keysDirectory}/id_rsa.pub:/root/.ssh/authorized_keys:ro",
            "-d", imageWithTag(imageWithTagPrefix, centosVersionList.get(0)),
    )
    doLast {
        println("login with command: ssh -o \"UserKnownHostsFile /dev/null\" -p ${port} root@localhost")
    }
}

task stopDockerContainer(type: Exec) {
    executable("docker")
    args(
            "stop", containerName
    )
}

private static String imageWithTag(
        String imageWithTagPrefix,
        String centosVersion
) {
    return "${imageWithTagPrefix}-${centosVersion}"
}

apply from: project.file("docs.nginx.gradle")
